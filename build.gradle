plugins {
	id 'java'
	id 'maven-publish'
	id 'fabric-loom' version '1.3-SNAPSHOT' apply false
	id 'ploceus' version '1.3-SNAPSHOT' apply false
}

def configure(project) {
	project.apply plugin: 'java'
	project.apply plugin: 'maven-publish'
	project.apply plugin: 'fabric-loom'
	project.apply plugin: 'ploceus'

	project.base {
		archivesName = "${project.rootProject.archives_base_name}-${project.environment}"
	}
	project.version = "${project.rootProject.version}+${project.rootProject.minecraft_version}"
	project.maven_group = project.rootProject.maven_group

	project.repositories {
	}

	project.dependencies {
		minecraft "com.mojang:minecraft:${project.rootProject.minecraft_version}"
		mappings project.loom.layered {
			mappings "net.ornithemc:feather:${project.rootProject.minecraft_version}-${project.environment}+build.${project.feather_build}:v2"
			addLayer project.ploceus.nestedMappings() // remove this line if not using nests
		}
		nests "net.ornithemc:nests:${project.rootProject.minecraft_version}-${project.environment}+build.${project.nests_build}" // remove this line if not using nests

		modImplementation "net.fabricmc:fabric-loader:${project.rootProject.loader_version}"
	}

	project.sourceSets {
		main {
			resources {
				srcDirs += project.rootProject.sourceSets.main.resources.srcDirs
			}
		}
	}

	project.processResources {
		filesMatching('fabric.mod.json') {
			expand project.properties
		}
	}

	project.tasks.withType(JavaCompile).configureEach {
		it.options.encoding = 'UTF-8'
		it.options.release = 8
	}

	project.java {
		// Still required by IDEs such as Eclipse and Visual Studio Code
		sourceCompatibility = JavaVersion.VERSION_1_8
		targetCompatibility = JavaVersion.VERSION_1_8

		// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
		// If you remove this line, sources will not be generated.
		withSourcesJar()

		// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
		// Uncomment this line to generate them.
		// withJavadocJar()
	}

	// If you plan to use a different file for the license, don't forget to change the file name here!
	project.jar {
		from('LICENSE') {
			rename { "${it}_${project.base.archivesName.get()}" }
		}
	}

	// Configure the maven publication
	project.publishing {
		publications {
			mavenJava(MavenPublication) {
				from project.components.java
			}
		}

		// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
		repositories {
			// Add repositories to publish to here.
			// Notice: This block does NOT have the same function as the block in the top level.
			// The repositories here will be used for publishing your artifact, not for
			// retrieving dependencies.
		}
	}
}
